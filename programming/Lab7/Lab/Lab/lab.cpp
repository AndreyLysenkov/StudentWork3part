#include "stl.cpp"

//Task
//В программе № 1 выполнить следующее :
//1. Создать объект - контейнер в соответствии с вариантом задания и заполнить его данными, тип которых определяется вариантом задания.
//2. Просмотреть контейнер.
//3. Изменить контейнер, удалив из него одни элементы и заменив другие.
//4. Просмотреть контейнер, используя для доступа к его элементам итераторы.
//5. Создать второй контейнер этого же класса и заполнить его данными того же типа, что и первый контейнер.
//6. Изменить первый контейнер, удалив из него n элементов после заданного и добавив затем в него все элементы из второго контейнера.
//7. Просмотреть первый и второй контейнеры.
//В программе № 2 выполнить то же самое, но для данных пользовательского типа.
//В программе № 3 выполнить следующее :
//1. Создать контейнер, содержащий объекты пользовательского типа.Тип контейнера выбирается в соответствии с вариантом задания.
//2. Отсортировать его по убыванию элементов.
//3. Просмотреть контейнер.
//4. Используя подходящий алгоритм, найти в контейнере элемент, удовлетворяющий заданному условию.
//5. Переместить элементы, удовлетворяющие заданному условию в другой(предварительно пустой) контейнер.Тип второго контейнера определяется вариантом задания.
//6. Просмотреть второй контейнер.
//7. Отсортировать первый и второй контейнеры по возрастанию элементов.
//2
//8. Просмотреть их.
//9. Получить третий контейнер путем слияния первых двух.
//10. Просмотреть третий контейнер.
//11. Подсчитать, сколько элементов, удовлетворяющих заданному условию, содержит третий контейнер.
//12. Определить, есть ли в третьем контейнере элемент, удовлетворяющий заданному условию.
//Variant 9
//9 - set - stack - int

//#include <iostream>
//#include <vector>
//using namespace std;
//
//void main()
//{
//	vector<int> v;
//	int i;
//	for (i = 0;i<10;i++)v.push_back(i);
//	cout << "size = " << v.size() << "\n";
//	for (i = 0;i<10;i++)cout << v[i] << " ";
//	cout << endl;
//	for (i = 0;i<10;i++)v[i] = v[i] + v[i];
//	for (i = 0;i<v.size();i++)cout << v[i] << " ";
//	cout << endl;
//	system("pause");
//}

int main()
{
	set<Test> _tmp;
//	//_tmp.insert(1, 5);
//	/*_tmp.emplace(1);*/
//	//_tmp.emplace(2);
//	//_tmp.insert(30);
	for (int i = 0; i < 10; i++)
	{
		_tmp.emplace(Test(i, i * 3 + 3));
	}
//	Test x = Test(2, 2 * 3 + 3);
//	Test y = Test(3, 3 * 3 + 3);
//	_tmp.insert(x);
//	_tmp.emplace(y);
//	copy(_tmp.begin(), 
//		_tmp.end(), 
//		ostream_iterator<Test>(cout, " "));
//
	set<int> op;
//
	op.insert(5);
	op.insert(6);
//	copy(op.begin(),
//		op.end(),
//		ostream_iterator<int>(cout, " "));
//
//	set<Test>::iterator p = _tmp.begin();
//	//while (p != _tmp.end())
//	//{
//	//	cout << *p << " ";
//	//	p++;
//	//}
	PrintSet(&_tmp);
	PrintSet(&op);
//	/*
//	vector<int>::iterator p=v.begin();
//	while(p!=v.end())
//	{cout<<*p<<” “;p++;}
//	}
//	for (i = 0;i<10;i++)v.push_back(i);
//	cout << “size = ” << v.size() << “\n”;
//	vector<int>::iterator p = v.begin();*/
//	//while (p != v.end())
//	//{
//	//	cout << *p << ” “;p++;
//	//}
//	//fmap1.insert(pair<char, float>('c', 987.654));
	system("pause");
	return 0;
}

//#include <iostream>
//#include <set>
//
//using namespace std;
//
//class term {
//public:
//	string name;
//	int p;
//	term(string _name, int _p) : name(_name), p(_p) {};
//	bool operator< 
//(const term& b) const {
//		return name < b.name;
// } };
//int main(int argv, char **args) {
//	std::set<term> data;
//	data.insert(term("hello", 4));
//	data.insert(term("test", 1));
//	data.insert(term("anywhere", 2));
//	data.insert(term("two-fold", 7));
//	data.insert(term("nothing", 42));
//	for (std::set<term>::const_iterator it = data.begin();it != data.end();it++) {
//		std::cout << ", " << it->p << std::endl;
//	}
//	system("pause");
//}

